This project was interesting as well as challenging. I think I learned a lot about the different sorting algorithm.  After successfully completing the program, I run my program with supply files. The result was not surprisingly different for world list up to 100 for all three different sorting but when I test the program using word list of more then 1000 then the difference in time to sort was clearly seen. In order to sort the word list of more then 10000 words the selection sort seems to be really slow and when I test the program using 100000 and 1000000 the selection sort take much longer time then merge sort and quick sort. I have list some of result of time taken by individual sorting method while running different size of word list. The time list in the table is in millisecond. Words	    Merge sort	      Quick sort    Selection sort10		0.00164		0.002412	0.003666100		0.050583	0.079736	0.3157431000		0.00890981	1.109882	34.50641910000		15.409725	21.25379	3868.882393100000		201.842727	331.57778	562837.413692After carefully analyzing the result the merge sorts seems to be the most efficient in terms of time complexity meaning; time take to sort the word list, with the worst case scenario in terms of Big of O(n logn). The second efficient sort was quick sort with the same big O(n logn) in all most all the time when I run by program.   However, the worst case scenario might be O(n^2 ) for quick sort. The third one is selection sort with big O(n^2 ),  when the size of word list become larger the selection sort takes really significant time to print itâ€™s result.

Note: In order to run this program please follows the following steps.Select Run -> Run Configurations ->Arguments -> inside the program Arguments box; please type the configuration file and the wordlist file respectively.Also while reading this txt file please allows at least half page window to read the table display the table properly.